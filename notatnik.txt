/*
 * ir_decode.c
 *
 *  Created on: 5 sie 2015
 *      Author: mike
 */

#include "ir_decode.h"

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdint.h>


//makra u³atwij¹ce dostêp do portów
// **** pin
#define PORT(x) SPORT(x)
#define SPORT(x) (PORT##x)
// ***** port
#define PIN(x) SPIN(x)
#define SPIN(x) (PIN##x)
//****** DDR
#define DDR(x) SDDR(x)
#define SDDR(x) (DDR##x)


/*variables */
volatile uint8_t address;		//adres RC5
volatile uint8_t command;		//komenda RC5
volatile uint8_t toggle_bit;	//bit Toggle

/* flaga = 1 - informuje, ze z pilota zostal odebrany nowy kod,
 * po o=odczytaniu danych ze zmiennych nalezy wyzerowac flage, aby
 * zostaly przyjete kolejne kody z pilota
 */

volatile uint8_t Ir_key_press_flag;
volatile uint8_t rc5cnt;

void ir_init() {
	DDR(IR_PORT) &=~ IR_IN;		//pin jako wejscie
	PORT(IR_PORT) |= IR_IN;		//podciagniecie pinu do VCC

#if TIMER1_PRESCALER == 1
	TCCR1B |= (1<<CS10);				//Timer1 /1
#endif

#if TIMER1_PRESCALER == 8
	TCCR1B |= (1<<CS11);				//TImer1 /8
#endif

#if TIMER1_PRESCALER == 64
	TCCR1B |= (1<<CS11)|(1<<CS10);		//TImer1 /64
#endif

#if TIMER1_PRESCALER == 256
	TCCR1B |= (1<<CS12);				//TImer1 /256
#endif

TCCR1B &=~(1<<ICES1);					//zbocze opadajace na ICP
rc5cnt = 0;								// zerowanie licznika wystepujacych zboczy

TIMSK1 |= (1<<ICIE1);					//przerwanie od ICP
Ir_key_press_flag = 0;					//zerowanie flagi otrzymania kodu z pilota
}// ir_init end

//procedura obslug przerwania ICP1
ISR(TIMER1_CAPT_vect) {

	PORTC ^= (1<<5);
#define FRAME_RESTART 0
#define FRAME_OK 1
#define FRAME_END 2
#define FRAME_ERROR 3

static uint16_t LastCapture;
uint16_t PulseWitdh;

static uint8_t IrPulseCount;
static uint16_t IrData;
static uint8_t frame_status;

PulseWitdh = ICR1 - LastCapture;
LastCapture = ICR1;
TCCR1B ^= (1<<ICES1); 					//zmiana zbocza wyzwalajacego na przeciwne

if(PulseWitdh > MAX_BIT) rc5cnt = 0;

if(rc5cnt > 0) frame_status = FRAME_OK;

if(rc5cnt == 0) {
	IrData = 0;
	IrPulseCount = 0;
	TCCR1B |= (1<<ICES1);
	rc5cnt++;
	frame_status = FRAME_END;
}

if (frame_status == FRAME_OK) {
	//gdy zaklócenia (szpilki) - RESTART
	if(PulseWitdh < MIN_HALF_BIT) frame_status = FRAME_RESTART;
	//gdy blad ramki danych  (moze inny standard niz RC5) - RESTART
	if(PulseWitdh > MAX_BIT ) frame_status = FRAME_RESTART;
	if(frame_status == FRAME_OK) {
		if(PulseWitdh > MAX_HALF_BIT) rc5cnt++;

		if (rc5cnt > 1)
		if ((rc5cnt % 2) == 0 ){
			IrData = IrData << 1;
			if((TCCR1B & (1<<ICES1))) IrData |= 0x0001;

			if(IrPulseCount > 12) {
			if (Ir_key_press_flag == 0) {
				command = IrData & 0b0000000000111111;
					address = (IrData & 0b0000011111000000) >> 6;
					toggle_bit = (IrData & 0b0000100000000000) >> 11;
			}
			frame_status = FRAME_RESTART;
			Ir_key_press_flag = 1;
			}
		}
		rc5cnt++;
	}
}

if (frame_status == FRAME_RESTART) {
	rc5cnt = 0;
	TCCR1B &=~ (1<<ICES1);
}
} // ISR end

